from UI.Ui_job_table_view import Ui_Form_list_jobs
from PyQt5 import QtWidgets as qtw
from PyQt5 import QtCore    as qtc
from PyQt5 import QtGui as qtg
from JobCrawler.db import DB

import datetime

class Table_view(qtw.QWidget, Ui_Form_list_jobs):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.setupUi(self)
        self.table_settings()
        self.filter_settings()

    def table_settings(self):
        self.tv_all_jobs.db = DB()
        self.tv_all_jobs.data = self.tv_all_jobs.db.select_all_jobs()

        model = self.setup_model()
        self.filter_proxy_model = qtc.QSortFilterProxyModel()
        self.filter_proxy_model.setSourceModel(model)
        self.filter_proxy_model.setFilterCaseSensitivity(qtc.Qt.CaseSensitivity.CaseInsensitive)
        self.filter_proxy_model.setFilterKeyColumn(1)
        self.tv_all_jobs.setModel(self.filter_proxy_model)

        # columns
        row_count = self.tv_all_jobs.model().rowCount()
        column_count = self.tv_all_jobs.model().columnCount()
        self.tv_all_jobs.setMinimumHeight(row_count * 40)
        self.tv_all_jobs.setMinimumWidth(column_count * 200)
        self.tv_all_jobs.resizeColumnToContents(0)
        self.tv_all_jobs.resizeColumnToContents(1)
        self.tv_all_jobs.resizeColumnToContents(2)
        self.tv_all_jobs.setColumnWidth(3, 300)

        # columns must sort
        self.tv_all_jobs.setSortingEnabled(True)
        self.tv_all_jobs.sortByColumn(0, qtc.Qt.SortOrder.AscendingOrder)

    def setup_model(self):
        model = qtg.QStandardItemModel()
        self.column_names = self.tv_all_jobs.db.get_column_names()
        model.setHorizontalHeaderLabels(self.column_names)

        for i, row in enumerate(self.tv_all_jobs.data):
            items = []
            for field in row:
                item = qtg.QStandardItem()
                if isinstance(field, datetime.date):
                    field = field.strftime('%d.%m.%Y')

                col_role = qtc.Qt.ItemDataRole.DisplayRole
                item.setData(field, col_role)
                items.append(item)

            model.insertRow(i, items)

        return model

    def filter_settings(self):
        self.le_filter.textChanged.connect(self.filter_proxy_model.setFilterRegExp)

        self.cb_column.addItems(["{0}".format(col) for col in self.column_names])
        self.cb_column.setCurrentText('title')
        self.cb_column.currentIndexChanged.connect(lambda idx: self.set_filter_column(idx))


    @qtc.pyqtSlot(int)
    def set_filter_column(self, index):
        self.filter_proxy_model.setFilterKeyColumn(index)


if __name__=='__main__':
    w = qtw.QWidget()  # we must know the exact class, generated by QtDesigner
    gw = Ui_Form()
    gw.setupUi(w)
    # w.show()

